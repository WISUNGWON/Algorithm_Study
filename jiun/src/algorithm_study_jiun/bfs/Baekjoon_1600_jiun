import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Baekjoon_1600_jiun {
	static int R,C;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int[] hr = {1,2,2,1,-1,-2,-2,-1};
		int[] hc = {-2,-1,1,2,2,1,-1,-2};
		int[] dr = { -1, 1, 0, 0 };
		int[] dc = { 0, 0, 1, -1 };
	
		// input start
		int k = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		int C =  Integer.parseInt(st.nextToken()); // 가로 
		int R =  Integer.parseInt(st.nextToken());// 세로
		int[][] map = new int[R][C];
		for (int i = 0; i < R; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < C; j++) {
				map[i][j]=Integer.parseInt(st.nextToken());
			}
		}// input end
		
		boolean[][][] visit = new boolean[R][C][k+1];
		Queue<int[]> q = new LinkedList<int[]>();
		q.add(new int[] {0,0,k,0}); // 출발지에서는 k번까지 이동가능
		visit[0][0][0]=true;
		int min = Integer.MAX_VALUE;
		while(!q.isEmpty()) {
			int[] cur = q.poll();
			if(cur[0] == R-1 && cur[1] == C-1) {
				min = cur[3];
				break;
			}
			
			
			// 인접 방향으로 이동한 경우
			for (int i = 0; i < 4; i++) {
				int nr = cur[0] + dr[i];
				int nc = cur[1] + dc[i];
				
				if(nr < 0 || nr >= R || nc < 0 || nc >= C || map[nr][nc] == 1) continue;
				if(!visit[nr][nc][cur[2]]) {
					visit[nr][nc][cur[2]] = true;
					q.offer(new int[] {nr,nc,cur[2],cur[3]+1});
				}
			}
			
			if(cur[2] == 0) continue; //k번 모두 말처럼 이동했으면 인접한 경우만 이동가능.
			
			//말처럼 이동한 경우
			for (int i = 0; i < hc.length; i++) {
					int nr = cur[0] + hr[i];
					int nc = cur[1] + hc[i];
					if(nr < 0 || nr >= R || nc < 0 || nc >= C || map[nr][nc] == 1) continue;
					if(!visit[nr][nc][cur[2]-1]) {
						visit[nr][nc][cur[2]-1] = true;
						q.offer(new int[] {nr,nc,cur[2]-1,cur[3]+1});
					}
			}
		}// queue
		
		System.out.println(min == Integer.MAX_VALUE ? -1 : min);// 횟수 출력
	}// main
}// class
